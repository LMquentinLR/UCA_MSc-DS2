maximizationStep <- function(n, s1, s2, s11, s22, s12) {
mu1 = s1/n
mu2 = s2/n
sigma11 = s11/n-(mu1)^2
sigma22 = s22/n-(mu2)^2
sigma12 = s12/n-(mu1*mu2)
return(list(
mu = matrix(c(mu1, mu2), nrow=1, ncol=2),
sigma = matrix(c(s11, s12, s12, s22), nrow=2, ncol=2)
))
}
# Copies the initialized values for mu and sigma
copy_mu = mu
copy_sigma = sigma
for (loop in 1:50) {
e_results = expectationStep(X, copy_mu, copy_sigma)
copy_mu, copy_sigma = maximizationStep(e_results)
# Copies the initialized values for mu and sigma
copy_mu = mu
copy_sigma = sigma
for (loop in 1:50) {
n, s1, s2, s11, s22, s12 = expectationStep(X, copy_mu, copy_sigma)
# Copies the initialized values for mu and sigma
copy_mu = mu
copy_sigma = sigma
for (loop in 1:50) {
(n, s1, s2, s11, s22, s12) = expectationStep(X, copy_mu, copy_sigma)
# Copies the initialized values for mu and sigma
copy_mu = mu
copy_sigma = sigma
for (loop in 1:50) {
e_results = expectationStep(X, copy_mu, copy_sigma)
copy_mu, copy_sigma = maximizationStep(n, s1, s2, s11, s22, s12)
# Copies the initialized values for mu and sigma
copy_mu = mu
copy_sigma = sigma
for (loop in 1:50) {
e = expectationStep(X, copy_mu, copy_sigma)
copy_mu, copy_sigma = maximizationStep(e$n, e$s1, e$s2, e$s11, e$s22, e$s12)
# Copies the initialized values for mu and sigma
copy_mu = mu
copy_sigma = sigma
for (loop in 1:50) {
e = expectationStep(X, copy_mu, copy_sigma)
m = maximizationStep(e$n, e$s1, e$s2, e$s11, e$s22, e$s12)
copy_mu = m$mu
copy_sigma = m$sigma
}
# Copies the initialized values for mu and sigma
copy_mu = mu
copy_sigma = sigma
for (loop in 1:50) {
e = expectationStep(X, copy_mu, copy_sigma)
m = maximizationStep(e$n, e$s1, e$s2, e$s11, e$s22, e$s12)
copy_mu = m$mu
copy_sigma = m$sigma
}
cat(copy_mu)
cat(copy_sigma)
# Copies the initialized values for mu and sigma
copy_mu = mu
copy_sigma = sigma
for (loop in 1:50) {
e = expectationStep(X, copy_mu, copy_sigma)
m = maximizationStep(e$n, e$s1, e$s2, e$s11, e$s22, e$s12)
copy_mu = m$mu
copy_sigma = m$sigma
}
print(copy_mu)
cat(copy_sigma)
# Copies the initialized values for mu and sigma
copy_mu = mu
copy_sigma = sigma
for (loop in 1:50) {
e = expectationStep(X, copy_mu, copy_sigma)
m = maximizationStep(e$n, e$s1, e$s2, e$s11, e$s22, e$s12)
copy_mu = m$mu
copy_sigma = m$sigma
}
print(copy_mu)
print(copy_sigma)
mu
sigma
expectationStep <- function(X, mu, Sigma) {
######
#### Expectation step of a bivariate dataset with missing data in the
#### second dimension, i.e., X[,2]
######
n=nrow(X)
missing_idx = which(is.na(X[,2]))
#all the element in X1 are observed
s1_vec = X[,1]
s11_vec = X[,1]^2
s2_vec = rep(0,n)
s22_vec = rep(0,n)
# For observed elements in X2
s2_vec[setdiff(1:n, missing_idx)] = X[setdiff(1:n, missing_idx), 2]
s22_vec[setdiff(1:n, missing_idx)] = X[setdiff(1:n, missing_idx), 2]^2
# For missing elements in X2
s2_vec[missing_idx] = mu[2] +
(Sigma[1,2]/Sigma[1,1]) * (X[missing_idx,1]-mu[1])
s22_vec[missing_idx] = s2_vec[missing_idx]^2 +
Sigma[2,2] -
Sigma[1,2]^2 / Sigma[1,1]
s12_vec = s1_vec * s2_vec
return(list(
n=n,
s1=sum(s1_vec),
s2=sum(s2_vec),
s11=sum(s11_vec),
s22=sum(s22_vec),
s12 = sum(s12_vec)
)
)
}
maximizationStep <- function(n, s1, s2, s11, s22, s12) {
mu1 = s1/n
mu2 = s2/n
sigma11 = s11/n-(mu1)^2
sigma22 = s22/n-(mu2)^2
sigma12 = s12/n-(mu1*mu2)
return(list(
mu = matrix(c(mu1, mu2), nrow=1, ncol=2),
sigma = matrix(c(sigma11, sigma12, sigma12, sigma22), nrow=2, ncol=2)
))
}
# Copies the initialized values for mu and sigma
copy_mu = mu
copy_sigma = sigma
for (loop in 1:50) {
e = expectationStep(X, copy_mu, copy_sigma)
m = maximizationStep(e$n, e$s1, e$s2, e$s11, e$s22, e$s12)
copy_mu = m$mu
copy_sigma = m$sigma
}
print(copy_mu)
print(copy_sigma)
EM_algotithm <- function(X, initMu, initSigma, maxIteration=50) {
######
#### Runs the EM algorithm for a given number of iterations
######
# Copies the initialized values for mu and sigma
copyMu = initMu
copySigma = initSigma
for (loop in 1:maxIteration) {
e = expectationStep(X, copyMu, copySigma)
m = maximizationStep(e$n, e$s1, e$s2, e$s11, e$s22, e$s12)
copyMu = m$mu
copySigma = m$sigma
}
print(copyMu)
print(copySigma)
return(list(mu=copyMu, sigma=copySigma))
}
**Q5)** Use the EM algorithm for $50$ iterations to estimate $\mu$ and $\Sigma$. Show the results.
```{r}
emAlgotithm <- function(X, initMu, initSigma, maxIteration=50) {
######
#### Runs the EM algorithm for a given number of iterations
######
# Copies the initialized values for mu and sigma
copyMu = initMu
copySigma = initSigma
for (loop in 1:maxIteration) {
e = expectationStep(X, copyMu, copySigma)
m = maximizationStep(e$n, e$s1, e$s2, e$s11, e$s22, e$s12)
copyMu = m$mu
copySigma = m$sigma
}
print(copyMu)
print(copySigma)
return(list(mu=copyMu, sigma=copySigma))
}
emAlgotithm(X, mu, sigma)
emAlgotithm <- function(X, initMu, initSigma, maxIteration=50) {
######
#### Runs the EM algorithm for a given number of iterations
######
# Copies the initialized values for mu and sigma
copyMu = initMu
copySigma = initSigma
for (loop in 1:maxIteration) {
e = expectationStep(X, copyMu, copySigma)
m = maximizationStep(e$n, e$s1, e$s2, e$s11, e$s22, e$s12)
copyMu = m$mu
copySigma = m$sigma
}
return(list(mu=copyMu, sigma=copySigma))
}
emAlgotithm(X, mu, sigma)
for (i in c(100, 500, 1000)) {print(i)}
**Q6)** Vary $n$ and the percentage of missing values $r$ and see what happens.
```{r}
n_range <- c(100, 500, 1000)
missing_ratio <- c(0.1, 0.3, 0.5)
for (n in n_range) {
for (mis in missing_ratio) {
cat("\n\n", n, mis)
data = rmvnorm(n, mu, sigma)
missing_idx.mcar <- sample.int(n, 0.3*n)
X = data
X[missing_idx.mcar, 2] = NA
print(emAlgotithm(X, mu, sigma))
}
}
n_range <- c(100, 500, 1000)
missing_ratio <- c(0.1, 0.3, 0.5)
for (n in n_range) {
for (mis in missing_ratio) {
data = rmvnorm(n, mu, sigma)
missing_idx.mcar <- sample.int(n, 0.3*n)
X = data
X[missing_idx.mcar, 2] = NA
cat("\n\n", n, mis, "\n")
print(emAlgotithm(X, mu, sigma))
}
}
n_range <- c(100, 500, 1000)
missing_ratio <- c(0.1, 0.3, 0.5)
for (n in n_range) {
for (mis in missing_ratio) {
data = rmvnorm(n, mu, sigma)
missing_idx.mcar <- sample.int(n, 0.3*n)
X = data
X[missing_idx.mcar, 2] = NA
cat("\n\nn=", n, ", NA ratio: ", mis, "\n")
print(emAlgotithm(X, mu, sigma))
}
}
install.packages("FactoMineR")
show.image <- function(x,np){ image(t(matrix(X[(np*np):1],ncol=np,byrow=T)),col=palette(gray(0:255/255)))}
library(png)
X = readPNG('image.png')
install.packages("png")
library(png)
X = readPNG('image.png')
setwd("~/Dev/UCA_MSc-DS2/model_based_learning/practica")
X = readPNG('image.png')
show.image <- function(x,np){ image(t(matrix(X[(np*np):1],ncol=np,byrow=T)),col=palette(gray(0:255/255)))}
library(png)
show.image <- function(x,np){
image(t(matrix(X[(np*np):1],ncol=np,byrow=T)),col=palette(gray(0:255/255)))
}
X = readPNG('image.png')
Z = matrix(NA,4096,64)
# Split the image as 8x8 patches
for (i in 1:64) {
for(j in 1:64) {
Z[64*(i-1)+j,] = as.vector(t(X[(8*(i-1)+1):(8*i),(8*(j-1)+1):(8*j)]))
}
}
dim(Z
)
Z
z[1,]
Z[1,]
cov(Z)
dim(cov(Z))
dim(cov(Z[1,]))
dim(cov(Z[,1]))
dim(cov(Z))
X = readPNG('image.png')
Z = matrix(NA,4096,64)
# Split the image as 8x8 patches
for (i in 1:64) {
for(j in 1:64) {
Z[64*(i-1)+j,] = as.vector(t(X[(8*(i-1)+1):(8*i),(8*(j-1)+1):(8*j)]))
}
}
# Projection with PCA
d = 10
U = eigen(cov(Z))
U
U[1:10,]*Z
t(U[1:10m,])*Z
t(U[1:10,,])*Z
dim(U[1:10,])
dim(U)
U
matrix(U)
as.matrix(U)
U*Z
Z*U
U
class(U)
U = eigen(cov(Z))$vectors
dim(U)
# Projection with PCA
d = 10
U = eigen(cov(Z))$vectors[,1:d]
U[1:10,]
z*U
U*Z
Z*U
dim(U)
dim(Z)
# Projection with PCA
d = 10
U = eigen(cov(Z))$vectors[,1:d]
z = Z %*% U
z
# Reconstruction of patches from PC scores (z and U)
Zb = z %*% t(U)
Z == Zb
# Reconstruction of the image from reconstructed patches
Xb = matrix(NA,512,512)
for (i in 1:64) {
for(j in 1:64) {
Xb[(8*(i-1)+1):(8*i),(8*(j-1)+1):(8*j)] = matrix(Zb[64*(i-1)+j,],8,8,byrow=T)
}
}
# Computation of the compression rate
comp.rate = ??????
# Visualization
split.screen(c(1,2))
screen(1)
image(t(X[512:1,]),col=palette(gray(0:255/255)))
# Visualization
split.screen(c(1,2))
screen(1)
image(t(X[512:1,]),col=palette(gray(0:255/255)))
screen(2)
image(t(Xb[512:1,]),col=palette(gray(0:255/255)))
main(paste("Compression rate:",comp.rate))
split.screen(c(1,2))
screen(1)
image(t(X[512:1,]),col=palette(gray(0:255/255)))
screen(2)
image(t(Xb[512:1,]),col=palette(gray(0:255/255)))
show.image <- function(x,np){
image(t(matrix(X[(np*np):1],ncol=np,byrow=T)),col=palette(gray(0:255/255)))
}
X = readPNG('image.png')
Z = matrix(NA,4096,64)
# Split the image as 8x8 patches
for (i in 1:64) {
for(j in 1:64) {
Z[64*(i-1)+j,] = as.vector(t(X[(8*(i-1)+1):(8*i),(8*(j-1)+1):(8*j)]))
}
}
# Projection with PCA
d = 10
U = eigen(cov(Z))$vectors[,1:d]
z = Z %*% U
# Reconstruction of patches from PC scores (z and U)
Zb = z %*% t(U)
# Reconstruction of the image from reconstructed patches
Xb = matrix(NA,512,512)
for (i in 1:64) {
for(j in 1:64) {
Xb[(8*(i-1)+1):(8*i),(8*(j-1)+1):(8*j)] = matrix(Zb[64*(i-1)+j,],8,8,byrow=T)
}
}
# Computation of the compression rate
comp.rate = ??????
# Visualization
split.screen(c(1,2))
screen(1)
image(t(X[512:1,]),col=palette(gray(0:255/255)))
screen(2)
image(t(Xb[512:1,]),col=palette(gray(0:255/255)))
main(paste("Compression rate:",comp.rate))
# Computation of the compression rate
comp.rate = ??????
# Visualization
split.screen(c(1,2))
screen(1)
image(t(X[512:1,]),col=palette(gray(0:255/255)))
screen(2)
image(t(Xb[512:1,]),col=palette(gray(0:255/255)))
# Computation of the compression rate
comp.rate = ??????
# Visualization
split.screen(c(1,2))
screen(1)
image(t(X[512:1,]),col=palette(gray(0:255/255)))
screen(2)
screen(2)
# Visualization
split.screen(c(1,2))
screen(1)
image(t(X[512:1,]),col=palette(gray(0:255/255)))
screen(2)
image(t(Xb[512:1,]),col=palette(gray(0:255/255)))
# Computation of the compression rate
comp.original = 4096 * 64
comp.pca = 4096 * 10 + 64 * 1
comp.rate = comp.pca / comp.original
# Visualization
split.screen(c(1,2))
screen(1)
image(t(X[512:1,]),col=palette(gray(0:255/255)))
screen(2)
image(t(Xb[512:1,]),col=palette(gray(0:255/255)))
main(paste("Compression rate:",comp.rate))
# Visualization
split.screen(c(1,2))
screen(1)
image(t(X[512:1,]),col=palette(gray(0:255/255)))
screen(2)
image(t(Xb[512:1,]),col=palette(gray(0:255/255)))
main(paste("Compression rate:",comp.rate))
print(comp.rate)
# Projection with PCA
d = 5
U = eigen(cov(Z))$vectors[,1:d]
z = Z %*% U
# Reconstruction of patches from PC scores (z and U)
Zb = z %*% t(U)
# Reconstruction of the image from reconstructed patches
Xb = matrix(NA,512,512)
for (i in 1:64) {
for(j in 1:64) {
Xb[(8*(i-1)+1):(8*i),(8*(j-1)+1):(8*j)] = matrix(Zb[64*(i-1)+j,],8,8,byrow=T)
}
}
# Computation of the compression rate
comp.original = 4096 * 64
comp.pca = 4096 * 10 + 64 * 1
comp.rate = comp.pca / comp.original
print(comp.rate)
# Projection with PCA
d = 5
# Projection with PCA
d = 2
U = eigen(cov(Z))$vectors[,1:d]
z = Z %*% U
# Reconstruction of patches from PC scores (z and U)
Zb = z %*% t(U)
# Reconstruction of the image from reconstructed patches
Xb = matrix(NA,512,512)
for (i in 1:64) {
for(j in 1:64) {
Xb[(8*(i-1)+1):(8*i),(8*(j-1)+1):(8*j)] = matrix(Zb[64*(i-1)+j,],8,8,byrow=T)
}
}
# Computation of the compression rate
comp.original = 4096 * 64
comp.pca = 4096 * 10 + 64 * 1
comp.rate = comp.pca / comp.original
print(comp.rate)
# Visualization
split.screen(c(1,2))
screen(1)
image(t(X[512:1,]),col=palette(gray(0:255/255)))
screen(2)
image(t(Xb[512:1,]),col=palette(gray(0:255/255)))
# Visualization
split.screen(c(1,2))
screen(1)
image(t(X[512:1,]),col=palette(gray(0:255/255)))
screen(2)
image(t(Xb[512:1,]),col=palette(gray(0:255/255)))
title(main(paste("Compression rate:", round(comp.rate,3))))
Visualization
split.screen(c(1,2))
screen(1)
image(t(X[512:1,]),col=palette(gray(0:255/255)))
screen(2)
image(t(Xb[512:1,]),col=palette(gray(0:255/255)))
title(main=paste("Compression rate:", round(comp.rate,3))))
isualization
split.screen(c(1,2))
screen(1)
image(t(X[512:1,]),col=palette(gray(0:255/255)))
screen(2)
image(t(Xb[512:1,]),col=palette(gray(0:255/255)))
title(main=paste("Compression rate:", round(comp.rate,3)))
isualization
split.screen(c(1,2))
screen(1)
image(t(X[512:1,]),col=palette(gray(0:255/255)))
screen(2)
image(t(Xb[512:1,]),col=palette(gray(0:255/255)))
title(main=paste("Compression rate:", 1 - round(comp.rate,3)))
library(png)
show.image <- function(x,np){
image(t(matrix(X[(np*np):1],ncol=np,byrow=T)),col=palette(gray(0:255/255)))
}
X = readPNG('image.png')
Z = matrix(NA,4096,64)
# Split the image as 8x8 patches
for (i in 1:64) {
for(j in 1:64) {
Z[64*(i-1)+j,] = as.vector(t(X[(8*(i-1)+1):(8*i),(8*(j-1)+1):(8*j)]))
}
}
# Projection with PCA
d = 2
U = eigen(cov(Z))$vectors[,1:d]
z = Z %*% U
# Reconstruction of patches from PC scores (z and U)
Zb = z %*% t(U)
# Reconstruction of the image from reconstructed patches
Xb = matrix(NA,512,512)
for (i in 1:64) {
for(j in 1:64) {
Xb[(8*(i-1)+1):(8*i),(8*(j-1)+1):(8*j)] = matrix(Zb[64*(i-1)+j,],8,8,byrow=T)
}
}
# Computation of the compression rate
comp.original = 4096 * 64
comp.pca = 4096 * d + 64 * d
comp.rate = comp.pca / comp.original
print(comp.rate)
# Visualization
split.screen(c(1,2))
screen(1)
image(t(X[512:1,]),col=palette(gray(0:255/255)))
screen(2)
image(t(Xb[512:1,]),col=palette(gray(0:255/255)))
title(main=paste("Compression rate:", 1 - round(comp.rate,3)))
